generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  discordId   String       @unique
  discordName String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownedNFTs   NFT[]        @relation("Ownership")
  wallets     UserWallet[]

  @@map("User")
}

model UserWallet {
  id        String   @id @default(cuid())
  address   String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("UserWallet")
}

model NFT {
  id             String      @id @default(cuid())
  mint           String      @unique
  name           String
  symbol         String?
  image          String?
  collection     String
  attributes     Json?
  ownerDiscordId String?
  ownerWallet    String?
  lastUpdated    DateTime    @updatedAt
  createdAt      DateTime    @default(now())
  currentOwner   User?       @relation("Ownership", fields: [ownerDiscordId], references: [discordId])
  currentListing NFTListing?
  rarity         NFTRarity?
  salesHistory   NFTSale[]
}

model NFTRarity {
  id          String   @id @default(cuid())
  nftId       String   @unique
  rank        Int
  score       Float
  attributes  Json
  source      String
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  nft         NFT      @relation(fields: [nftId], references: [id])
}

model NFTSale {
  id          String   @id @default(cuid())
  nftId       String
  price       Float
  currency    String
  marketplace String
  signature   String   @unique
  buyer       String
  seller      String
  timestamp   DateTime
  createdAt   DateTime @default(now())
  nft         NFT      @relation(fields: [nftId], references: [id])
}

model NFTListing {
  id          String   @id @default(cuid())
  nftId       String   @unique
  price       Float
  currency    String
  marketplace String
  seller      String
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  nft         NFT      @relation(fields: [nftId], references: [id])
}

model Collection {
  id          String   @id @default(cuid())
  name        String   @unique
  symbol      String?
  description String?
  isMain      Boolean  @default(false)
  totalSupply Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TokenBalance {
  walletAddress  String   @id
  balance        BigInt   @default(0)
  lastUpdated    DateTime @default(now())
  ownerDiscordId String?
}

model WalletVerification {
  id            String   @id @default(uuid())
  walletAddress String
  userId        String
  createdAt     DateTime @default(now())
  status        String   @default("pending")
  result        Json?

  @@index([walletAddress])
  @@index([userId])
}
