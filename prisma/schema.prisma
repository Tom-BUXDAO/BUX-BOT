generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  discordId     String?      @unique
  discordName   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  email         String?
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  ownedNFTs     NFT[]        @relation("Ownership")
  sessions      Session[]
  wallets       UserWallet[]
}

model UserWallet {
  id        String   @id @default(cuid())
  address   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([address, userId])
  @@index([userId])
}

model NFT {
  id             String      @id @default(cuid())
  mint           String      @unique
  name           String
  symbol         String?
  image          String?
  collection     String
  attributes     Json?
  ownerDiscordId String?
  ownerWallet    String?
  lastUpdated    DateTime    @updatedAt
  createdAt      DateTime    @default(now())
  currentOwner   User?       @relation("Ownership", fields: [ownerDiscordId], references: [discordId])
  currentListing NFTListing?
  rarity         NFTRarity?
  salesHistory   NFTSale[]
}

model NFTRarity {
  id          String   @id @default(cuid())
  nftId       String   @unique
  rank        Int
  score       Float
  attributes  Json
  source      String
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  nft         NFT      @relation(fields: [nftId], references: [id])
}

model NFTSale {
  id          String   @id @default(cuid())
  nftId       String
  price       Float
  currency    String
  marketplace String
  signature   String   @unique
  buyer       String
  seller      String
  timestamp   DateTime
  createdAt   DateTime @default(now())
  nft         NFT      @relation(fields: [nftId], references: [id])
}

model NFTListing {
  id          String   @id @default(cuid())
  nftId       String   @unique
  price       Float
  currency    String
  marketplace String
  seller      String
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  nft         NFT      @relation(fields: [nftId], references: [id])
}

model Collection {
  id          String   @id @default(cuid())
  name        String   @unique
  symbol      String?
  description String?
  isMain      Boolean  @default(false)
  totalSupply Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  listedCount Int      @default(0)
  floorPrice  BigInt   @default(0)
}

model TokenBalance {
  walletAddress  String   @id
  balance        BigInt   @default(0)
  lastUpdated    DateTime @default(now())
  ownerDiscordId String?
}

model WalletVerification {
  id            String   @id @default(uuid())
  walletAddress String
  userId        String
  createdAt     DateTime @default(now())
  status        String   @default("pending")
  result        Json?

  @@index([walletAddress])
  @@index([userId])
}

model Roles {
  id String @id @default(cuid())
  discordId String @unique
  buxBalance BigInt?
  aiBitbotsHolder       Boolean? @default(false)
  fckedCatzHolder       Boolean? @default(false)
  moneyMonstersHolder   Boolean? @default(false)
  moneyMonsters3dHolder Boolean? @default(false)
  celebCatzHolder       Boolean? @default(false)
  candyBotsHolder       Boolean? @default(false)
  doodleBotsHolder      Boolean? @default(false)
  energyApesHolder      Boolean? @default(false)
  rjctdBotsHolder       Boolean? @default(false)
  squirrelsHolder       Boolean? @default(false)
  warriorsHolder        Boolean? @default(false)
  aiBitbotsWhale        Boolean? @default(false)
  fckedCatzWhale        Boolean? @default(false)
  moneyMonstersWhale    Boolean? @default(false)
  moneyMonsters3dWhale  Boolean? @default(false)
  mmTop10               Boolean? @default(false)
  mm3dTop10             Boolean? @default(false)
  buxBanker             Boolean? @default(false)
  buxBeginner           Boolean? @default(false)
  buxSaver              Boolean? @default(false)
  buxBuilder            Boolean? @default(false)
  buxDao5               Boolean? @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())

  @@index([discordId])
}

model RoleConfig {
  id             Int      @id @default(autoincrement())
  roleName       String   @unique
  roleId         String
  displayName    String?
  threshold      Int      @default(0)
  collectionName String?
  roleType       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model RoleSync {
  id        String   @id @default(cuid())
  discordId String
  added     String[]
  removed   String[]
  success   Boolean
  error     String?
  timestamp DateTime @default(now())

  @@index([discordId])
  @@index([timestamp])
}
