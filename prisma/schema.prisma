generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  discordId     String?   @unique
  discordName   String?
  wallets       UserWallet[]
  roles         String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ownedNFTs     NFT[]     @relation("Ownership")
}

model UserWallet {
  id        String   @id @default(cuid())
  address   String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("UserWallet")
}

model NFT {
  id             String      @id @default(cuid())
  mint           String      @unique
  name           String
  symbol         String?
  image          String?
  collection     String
  attributes     Json?
  ownerDiscordId String?
  ownerWallet    String?
  lastUpdated    DateTime    @updatedAt
  createdAt      DateTime    @default(now())
  currentOwner   User?       @relation("Ownership", fields: [ownerDiscordId], references: [discordId])
  currentListing NFTListing?
  rarity         NFTRarity?
  salesHistory   NFTSale[]
}

model NFTRarity {
  id          String   @id @default(cuid())
  nftId       String   @unique
  rank        Int
  score       Float
  attributes  Json
  source      String
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  nft         NFT      @relation(fields: [nftId], references: [id])
}

model NFTSale {
  id          String   @id @default(cuid())
  nftId       String
  price       Float
  currency    String
  marketplace String
  signature   String   @unique
  buyer       String
  seller      String
  timestamp   DateTime
  createdAt   DateTime @default(now())
  nft         NFT      @relation(fields: [nftId], references: [id])
}

model NFTListing {
  id          String   @id @default(cuid())
  nftId       String   @unique
  price       Float
  currency    String
  marketplace String
  seller      String
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  nft         NFT      @relation(fields: [nftId], references: [id])
}

model Collection {
  id          String   @id @default(cuid())
  name        String   @unique
  symbol      String?
  description String?
  isMain      Boolean  @default(false)
  totalSupply Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TokenBalance {
  walletAddress  String   @id
  balance        BigInt   @default(0)
  lastUpdated    DateTime @default(now())
  ownerDiscordId String?
}

model WalletVerification {
  id            String   @id @default(uuid())
  walletAddress String
  userId        String
  createdAt     DateTime @default(now())
  status        String   @default("pending")
  result        Json?

  @@index([walletAddress])
  @@index([userId])
}
